/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface MominCoinInterface extends utils.Interface {
  functions: {
    "BNBRewardsFee()": FunctionFragment;
    "ZakatFee()": FunctionFragment;
    "ZakatWallet()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "automatedMarketMakerPairs(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "claim()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "dividendTokenBalanceOf(address)": FunctionFragment;
    "dividendTracker()": FunctionFragment;
    "excludeFromDividends(address)": FunctionFragment;
    "excludeFromFees(address,bool)": FunctionFragment;
    "excludeMultipleAccountsFromFees(address[],bool)": FunctionFragment;
    "extraFeeOnSell()": FunctionFragment;
    "gasForProcessing()": FunctionFragment;
    "getAccountDividendsInfo(address)": FunctionFragment;
    "getAccountDividendsInfoAtIndex(uint256)": FunctionFragment;
    "getClaimWait()": FunctionFragment;
    "getLastProcessedIndex()": FunctionFragment;
    "getNumberOfDividendTokenHolders()": FunctionFragment;
    "getTotalDividendsDistributed()": FunctionFragment;
    "includeToWhiteList(address[])": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isExcludedFromFees(address)": FunctionFragment;
    "isExcludedFromMaxTx(address)": FunctionFragment;
    "isOpen()": FunctionFragment;
    "liquidityFee()": FunctionFragment;
    "name()": FunctionFragment;
    "openTrade()": FunctionFragment;
    "owner()": FunctionFragment;
    "processDividendTracker(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAutomatedMarketMakerPair(address,bool)": FunctionFragment;
    "setExcludeFromAll(address)": FunctionFragment;
    "setExcludeFromMaxTx(address,bool)": FunctionFragment;
    "setExtraFeeOnSell(uint256)": FunctionFragment;
    "setFee(uint256,uint256,uint256)": FunctionFragment;
    "setSWapToensAtAmount(uint256)": FunctionFragment;
    "setSafeManager(address)": FunctionFragment;
    "setSwapAndLiquifyEnabled(bool)": FunctionFragment;
    "setZakatWallet(address)": FunctionFragment;
    "swapAndLiquifyEnabled()": FunctionFragment;
    "swapTokensAtAmount()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalFees()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV2Pair()": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
    "updateClaimWait(uint256)": FunctionFragment;
    "updateGasForProcessing(uint256)": FunctionFragment;
    "updateUniswapV2Router(address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawBNB(uint256)": FunctionFragment;
    "withdrawableDividendOf(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BNBRewardsFee"
      | "ZakatFee"
      | "ZakatWallet"
      | "allowance"
      | "approve"
      | "automatedMarketMakerPairs"
      | "balanceOf"
      | "claim"
      | "decimals"
      | "decreaseAllowance"
      | "dividendTokenBalanceOf"
      | "dividendTracker"
      | "excludeFromDividends"
      | "excludeFromFees"
      | "excludeMultipleAccountsFromFees"
      | "extraFeeOnSell"
      | "gasForProcessing"
      | "getAccountDividendsInfo"
      | "getAccountDividendsInfoAtIndex"
      | "getClaimWait"
      | "getLastProcessedIndex"
      | "getNumberOfDividendTokenHolders"
      | "getTotalDividendsDistributed"
      | "includeToWhiteList"
      | "increaseAllowance"
      | "isExcludedFromFees"
      | "isExcludedFromMaxTx"
      | "isOpen"
      | "liquidityFee"
      | "name"
      | "openTrade"
      | "owner"
      | "processDividendTracker"
      | "renounceOwnership"
      | "setAutomatedMarketMakerPair"
      | "setExcludeFromAll"
      | "setExcludeFromMaxTx"
      | "setExtraFeeOnSell"
      | "setFee"
      | "setSWapToensAtAmount"
      | "setSafeManager"
      | "setSwapAndLiquifyEnabled"
      | "setZakatWallet"
      | "swapAndLiquifyEnabled"
      | "swapTokensAtAmount"
      | "symbol"
      | "totalFees"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "uniswapV2Pair"
      | "uniswapV2Router"
      | "updateClaimWait"
      | "updateGasForProcessing"
      | "updateUniswapV2Router"
      | "withdraw"
      | "withdrawBNB"
      | "withdrawableDividendOf"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BNBRewardsFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ZakatFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ZakatWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "automatedMarketMakerPairs",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dividendTokenBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "dividendTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromDividends",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFees",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeMultipleAccountsFromFees",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "extraFeeOnSell",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gasForProcessing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountDividendsInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountDividendsInfoAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimWait",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastProcessedIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfDividendTokenHolders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDividendsDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "includeToWhiteList",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromMaxTx",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isOpen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "openTrade", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processDividendTracker",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAutomatedMarketMakerPair",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setExcludeFromAll",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setExcludeFromMaxTx",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setExtraFeeOnSell",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSWapToensAtAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSafeManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapAndLiquifyEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setZakatWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndLiquifyEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensAtAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateClaimWait",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGasForProcessing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUniswapV2Router",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBNB",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawableDividendOf",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "BNBRewardsFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ZakatFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ZakatWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "automatedMarketMakerPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dividendTokenBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dividendTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeMultipleAccountsFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraFeeOnSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasForProcessing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountDividendsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountDividendsInfoAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimWait",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastProcessedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfDividendTokenHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDividendsDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeToWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromMaxTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOpen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openTrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processDividendTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutomatedMarketMakerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExcludeFromAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExcludeFromMaxTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExtraFeeOnSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSWapToensAtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSafeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setZakatWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensAtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateClaimWait",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGasForProcessing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBNB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawableDividendOf",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ExcludeFromFees(address,bool)": EventFragment;
    "ExcludeMultipleAccountsFromFees(address[],bool)": EventFragment;
    "GasForProcessingUpdated(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProcessedDividendTracker(uint256,uint256,uint256,bool,uint256,address)": EventFragment;
    "SendDividends(uint256,uint256)": EventFragment;
    "SetAutomatedMarketMakerPair(address,bool)": EventFragment;
    "SwapAndLiquify(uint256,uint256)": EventFragment;
    "SwapAndLiquifyEnabledUpdated(bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpdateUniswapV2Router(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExcludeFromFees"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExcludeMultipleAccountsFromFees"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasForProcessingUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessedDividendTracker"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendDividends"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetAutomatedMarketMakerPair"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndLiquify"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SwapAndLiquifyEnabledUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateUniswapV2Router"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ExcludeFromFeesEventObject {
  account: string;
  isExcluded: boolean;
}
export type ExcludeFromFeesEvent = TypedEvent<
  [string, boolean],
  ExcludeFromFeesEventObject
>;

export type ExcludeFromFeesEventFilter = TypedEventFilter<ExcludeFromFeesEvent>;

export interface ExcludeMultipleAccountsFromFeesEventObject {
  accounts: string[];
  isExcluded: boolean;
}
export type ExcludeMultipleAccountsFromFeesEvent = TypedEvent<
  [string[], boolean],
  ExcludeMultipleAccountsFromFeesEventObject
>;

export type ExcludeMultipleAccountsFromFeesEventFilter =
  TypedEventFilter<ExcludeMultipleAccountsFromFeesEvent>;

export interface GasForProcessingUpdatedEventObject {
  newValue: BigNumber;
  oldValue: BigNumber;
}
export type GasForProcessingUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  GasForProcessingUpdatedEventObject
>;

export type GasForProcessingUpdatedEventFilter =
  TypedEventFilter<GasForProcessingUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProcessedDividendTrackerEventObject {
  iterations: BigNumber;
  claims: BigNumber;
  lastProcessedIndex: BigNumber;
  automatic: boolean;
  gas: BigNumber;
  processor: string;
}
export type ProcessedDividendTrackerEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, boolean, BigNumber, string],
  ProcessedDividendTrackerEventObject
>;

export type ProcessedDividendTrackerEventFilter =
  TypedEventFilter<ProcessedDividendTrackerEvent>;

export interface SendDividendsEventObject {
  tokensSwapped: BigNumber;
  amount: BigNumber;
}
export type SendDividendsEvent = TypedEvent<
  [BigNumber, BigNumber],
  SendDividendsEventObject
>;

export type SendDividendsEventFilter = TypedEventFilter<SendDividendsEvent>;

export interface SetAutomatedMarketMakerPairEventObject {
  pair: string;
  value: boolean;
}
export type SetAutomatedMarketMakerPairEvent = TypedEvent<
  [string, boolean],
  SetAutomatedMarketMakerPairEventObject
>;

export type SetAutomatedMarketMakerPairEventFilter =
  TypedEventFilter<SetAutomatedMarketMakerPairEvent>;

export interface SwapAndLiquifyEventObject {
  tokensIntoLiqudity: BigNumber;
  ethReceived: BigNumber;
}
export type SwapAndLiquifyEvent = TypedEvent<
  [BigNumber, BigNumber],
  SwapAndLiquifyEventObject
>;

export type SwapAndLiquifyEventFilter = TypedEventFilter<SwapAndLiquifyEvent>;

export interface SwapAndLiquifyEnabledUpdatedEventObject {
  enabled: boolean;
}
export type SwapAndLiquifyEnabledUpdatedEvent = TypedEvent<
  [boolean],
  SwapAndLiquifyEnabledUpdatedEventObject
>;

export type SwapAndLiquifyEnabledUpdatedEventFilter =
  TypedEventFilter<SwapAndLiquifyEnabledUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpdateUniswapV2RouterEventObject {
  newAddress: string;
  oldAddress: string;
}
export type UpdateUniswapV2RouterEvent = TypedEvent<
  [string, string],
  UpdateUniswapV2RouterEventObject
>;

export type UpdateUniswapV2RouterEventFilter =
  TypedEventFilter<UpdateUniswapV2RouterEvent>;

export interface MominCoin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MominCoinInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BNBRewardsFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    ZakatFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    ZakatWallet(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    dividendTokenBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dividendTracker(overrides?: CallOverrides): Promise<[string]>;

    excludeFromDividends(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    excludeMultipleAccountsFromFees(
      accounts: string[],
      excluded: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    extraFeeOnSell(overrides?: CallOverrides): Promise<[BigNumber]>;

    gasForProcessing(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAccountDividendsInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    getAccountDividendsInfoAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    getClaimWait(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastProcessedIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNumberOfDividendTokenHolders(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalDividendsDistributed(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    includeToWhiteList(
      _users: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isExcludedFromMaxTx(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOpen(overrides?: CallOverrides): Promise<[boolean]>;

    liquidityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    openTrade(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    processDividendTracker(
      gas: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setExcludeFromAll(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setExcludeFromMaxTx(
      _address: string,
      value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setExtraFeeOnSell(
      _extraFeeOnSell: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFee(
      _bnbRewardFee: BigNumberish,
      _liquidityFee: BigNumberish,
      _ZakatFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSWapToensAtAmount(
      _newAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSafeManager(
      _safeManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setZakatWallet(
      _newZakatWallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    swapTokensAtAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<[string]>;

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>;

    updateClaimWait(
      claimWait: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateGasForProcessing(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateUniswapV2Router(
      newAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawBNB(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawableDividendOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  BNBRewardsFee(overrides?: CallOverrides): Promise<BigNumber>;

  ZakatFee(overrides?: CallOverrides): Promise<BigNumber>;

  ZakatWallet(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  automatedMarketMakerPairs(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  dividendTokenBalanceOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dividendTracker(overrides?: CallOverrides): Promise<string>;

  excludeFromDividends(
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  excludeFromFees(
    account: string,
    excluded: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  excludeMultipleAccountsFromFees(
    accounts: string[],
    excluded: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  extraFeeOnSell(overrides?: CallOverrides): Promise<BigNumber>;

  gasForProcessing(overrides?: CallOverrides): Promise<BigNumber>;

  getAccountDividendsInfo(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  getAccountDividendsInfoAtIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  getClaimWait(overrides?: CallOverrides): Promise<BigNumber>;

  getLastProcessedIndex(overrides?: CallOverrides): Promise<BigNumber>;

  getNumberOfDividendTokenHolders(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalDividendsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

  includeToWhiteList(
    _users: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isExcludedFromFees(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isExcludedFromMaxTx(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOpen(overrides?: CallOverrides): Promise<boolean>;

  liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  openTrade(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  processDividendTracker(
    gas: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAutomatedMarketMakerPair(
    pair: string,
    value: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setExcludeFromAll(
    _address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setExcludeFromMaxTx(
    _address: string,
    value: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setExtraFeeOnSell(
    _extraFeeOnSell: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFee(
    _bnbRewardFee: BigNumberish,
    _liquidityFee: BigNumberish,
    _ZakatFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSWapToensAtAmount(
    _newAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSafeManager(
    _safeManager: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSwapAndLiquifyEnabled(
    _enabled: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setZakatWallet(
    _newZakatWallet: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<boolean>;

  swapTokensAtAmount(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalFees(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  updateClaimWait(
    claimWait: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateGasForProcessing(
    newValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateUniswapV2Router(
    newAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawBNB(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawableDividendOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    BNBRewardsFee(overrides?: CallOverrides): Promise<BigNumber>;

    ZakatFee(overrides?: CallOverrides): Promise<BigNumber>;

    ZakatWallet(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dividendTokenBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dividendTracker(overrides?: CallOverrides): Promise<string>;

    excludeFromDividends(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    excludeMultipleAccountsFromFees(
      accounts: string[],
      excluded: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    extraFeeOnSell(overrides?: CallOverrides): Promise<BigNumber>;

    gasForProcessing(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountDividendsInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    getAccountDividendsInfoAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    getClaimWait(overrides?: CallOverrides): Promise<BigNumber>;

    getLastProcessedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfDividendTokenHolders(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDividendsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    includeToWhiteList(
      _users: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromMaxTx(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOpen(overrides?: CallOverrides): Promise<boolean>;

    liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    openTrade(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    processDividendTracker(
      gas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setExcludeFromAll(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setExcludeFromMaxTx(
      _address: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setExtraFeeOnSell(
      _extraFeeOnSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      _bnbRewardFee: BigNumberish,
      _liquidityFee: BigNumberish,
      _ZakatFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSWapToensAtAmount(
      _newAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSafeManager(
      _safeManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setZakatWallet(
      _newZakatWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<boolean>;

    swapTokensAtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;

    updateClaimWait(
      claimWait: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateGasForProcessing(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUniswapV2Router(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBNB(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawableDividendOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "ExcludeFromFees(address,bool)"(
      account?: string | null,
      isExcluded?: null
    ): ExcludeFromFeesEventFilter;
    ExcludeFromFees(
      account?: string | null,
      isExcluded?: null
    ): ExcludeFromFeesEventFilter;

    "ExcludeMultipleAccountsFromFees(address[],bool)"(
      accounts?: null,
      isExcluded?: null
    ): ExcludeMultipleAccountsFromFeesEventFilter;
    ExcludeMultipleAccountsFromFees(
      accounts?: null,
      isExcluded?: null
    ): ExcludeMultipleAccountsFromFeesEventFilter;

    "GasForProcessingUpdated(uint256,uint256)"(
      newValue?: BigNumberish | null,
      oldValue?: BigNumberish | null
    ): GasForProcessingUpdatedEventFilter;
    GasForProcessingUpdated(
      newValue?: BigNumberish | null,
      oldValue?: BigNumberish | null
    ): GasForProcessingUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ProcessedDividendTracker(uint256,uint256,uint256,bool,uint256,address)"(
      iterations?: null,
      claims?: null,
      lastProcessedIndex?: null,
      automatic?: boolean | null,
      gas?: null,
      processor?: string | null
    ): ProcessedDividendTrackerEventFilter;
    ProcessedDividendTracker(
      iterations?: null,
      claims?: null,
      lastProcessedIndex?: null,
      automatic?: boolean | null,
      gas?: null,
      processor?: string | null
    ): ProcessedDividendTrackerEventFilter;

    "SendDividends(uint256,uint256)"(
      tokensSwapped?: null,
      amount?: null
    ): SendDividendsEventFilter;
    SendDividends(
      tokensSwapped?: null,
      amount?: null
    ): SendDividendsEventFilter;

    "SetAutomatedMarketMakerPair(address,bool)"(
      pair?: string | null,
      value?: boolean | null
    ): SetAutomatedMarketMakerPairEventFilter;
    SetAutomatedMarketMakerPair(
      pair?: string | null,
      value?: boolean | null
    ): SetAutomatedMarketMakerPairEventFilter;

    "SwapAndLiquify(uint256,uint256)"(
      tokensIntoLiqudity?: null,
      ethReceived?: null
    ): SwapAndLiquifyEventFilter;
    SwapAndLiquify(
      tokensIntoLiqudity?: null,
      ethReceived?: null
    ): SwapAndLiquifyEventFilter;

    "SwapAndLiquifyEnabledUpdated(bool)"(
      enabled?: null
    ): SwapAndLiquifyEnabledUpdatedEventFilter;
    SwapAndLiquifyEnabledUpdated(
      enabled?: null
    ): SwapAndLiquifyEnabledUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "UpdateUniswapV2Router(address,address)"(
      newAddress?: string | null,
      oldAddress?: string | null
    ): UpdateUniswapV2RouterEventFilter;
    UpdateUniswapV2Router(
      newAddress?: string | null,
      oldAddress?: string | null
    ): UpdateUniswapV2RouterEventFilter;
  };

  estimateGas: {
    BNBRewardsFee(overrides?: CallOverrides): Promise<BigNumber>;

    ZakatFee(overrides?: CallOverrides): Promise<BigNumber>;

    ZakatWallet(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    dividendTokenBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dividendTracker(overrides?: CallOverrides): Promise<BigNumber>;

    excludeFromDividends(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    excludeMultipleAccountsFromFees(
      accounts: string[],
      excluded: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    extraFeeOnSell(overrides?: CallOverrides): Promise<BigNumber>;

    gasForProcessing(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountDividendsInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountDividendsInfoAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimWait(overrides?: CallOverrides): Promise<BigNumber>;

    getLastProcessedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfDividendTokenHolders(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDividendsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    includeToWhiteList(
      _users: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExcludedFromMaxTx(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOpen(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    openTrade(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    processDividendTracker(
      gas: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setExcludeFromAll(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setExcludeFromMaxTx(
      _address: string,
      value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setExtraFeeOnSell(
      _extraFeeOnSell: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFee(
      _bnbRewardFee: BigNumberish,
      _liquidityFee: BigNumberish,
      _ZakatFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSWapToensAtAmount(
      _newAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSafeManager(
      _safeManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setZakatWallet(
      _newZakatWallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    swapTokensAtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;

    updateClaimWait(
      claimWait: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateGasForProcessing(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateUniswapV2Router(
      newAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawBNB(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawableDividendOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BNBRewardsFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZakatFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZakatWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    dividendTokenBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dividendTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeFromDividends(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    excludeMultipleAccountsFromFees(
      accounts: string[],
      excluded: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    extraFeeOnSell(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasForProcessing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountDividendsInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountDividendsInfoAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimWait(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastProcessedIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfDividendTokenHolders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDividendsDistributed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    includeToWhiteList(
      _users: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExcludedFromMaxTx(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openTrade(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processDividendTracker(
      gas: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setExcludeFromAll(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setExcludeFromMaxTx(
      _address: string,
      value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setExtraFeeOnSell(
      _extraFeeOnSell: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFee(
      _bnbRewardFee: BigNumberish,
      _liquidityFee: BigNumberish,
      _ZakatFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSWapToensAtAmount(
      _newAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSafeManager(
      _safeManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setZakatWallet(
      _newZakatWallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapAndLiquifyEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapTokensAtAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateClaimWait(
      claimWait: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateGasForProcessing(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateUniswapV2Router(
      newAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawBNB(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawableDividendOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
